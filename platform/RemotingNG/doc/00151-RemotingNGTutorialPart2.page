Remoting NG Tutorial Part 2: Advanced Remoting
Remoting NG

!!!Welcome Back

Welcome to part two of the Remoting tutorial.
This part of the Remoting tutorial covers topics such as
using user-defined argument types in remote methods and
remote events.

This tutorial assumes that you are familiar with basic POCO C++ Libraries
programming techniques. You should also have read the [[00100-RemotingNGOverview.html Remoting Overview]]
and be familiar with basic Remoting concepts, such as presented in
[[00150-RemotingNGTutorialPart1.html part 1 of the Remoting tutorial].


!!!Using User-Defined Classes as Parameters

Besides the built-in C++ types (with the exception of pointers), 
including enumerations (with some restrictions), 
<[std::string]>, <[std::vector]>, <[std::set]> and <[std::multiset]>, as
well as Poco::DateTime, Poco::LocalDateTime, Poco::Timestamp, Poco::Timespan, 
Poco::Nullable, Poco::AutoPtr and Poco::SharedPtr,
Remoting also supports user-defined classes and structures as parameter types.

For this to work, a serializer and a deserializer class must be generated for each
class or structure used as parameter or return value type. Serializers and deserializers
can be generated automatically by the Remoting code generator. For this to work,
the respective class or struct must be annotated with the <[@serialize]> attribute.

To demonstrate this, we extend the TimeService class with a new method,
<[currentTimeAsStruct()]>, that returns the current time in a struct.

Following is the updated header file for the TimeService class.

    #ifndef TimeService_INCLUDED
    #define TimeService_INCLUDED
    
    
    #include <string>
    
    
    namespace Sample {
    
    
    //@ serialize
    struct Time
    {
        int hour;
        int minute;
        int second;
    };
    
    
    //@ remote
    //@ namespace = "http://sample.com/webservices/TimeService"
    class TimeService
    {
    public:
        TimeService();
            /// Creates the TimeService.
            
        ~TimeService();
            /// Destroys the TimeService.
            
        std::string currentTimeAsString() const;
            /// Returns the current time, formatted
            /// as a string (HH:MM::SS).

        Time currentTimeAsStruct() const;
            /// Returns the current time
            /// in a Time structure.
    };
    
    
    } // namespace Sample
    
    
    #endif // TimeService_INCLUDED
----

The actual implementation of the <[currentTimeAsStruct()]> member function is
left as an exercise to the reader.

Now that we have updated the header file, we have to re-run the code generator.
This time, the code generator will notice that there is a <[Time]> structure
annotated as <[@serialize]>, and it will generate a serializer and a deserializer
class for it. Serializers and deserializers are implemented as template specializations
of the Poco::RemotingNG::TypeSerializer (or Poco::RemotingNG::TypeDeserializer, respectively)
class template, and thus header file only.

Two new files will be generated in the <*include*> directory of the TimeServer project:
<*TimeSerializer.h*> contains the <[TypeSerializer]> template specialization for the
<[Time]> structure, and <*TimeDeserializer.h*> contains the <[TypeDeserializer]>
template specialization for the <[Time]> structure.

To use the new member function on the client as well, we also must re-run the
code generator for the client code. The serializer and deserializer classes will
be generated for the client as well.

We can now change the client to use the new method.

    #include "TimeServiceClientHelper.h"
    #include "Poco/RemotingNG/TCP/TransportFactory.h"
    #include <iostream>
    #include <iomanip>
    
    
    int main(int argc, char** argv)
    {
        try
        {
            // Register TCP Transport.
            Poco::RemotingNG::TCP::TransportFactory::registerFactory();
            
            // Get proxy for remote TimeService.
            std::string uri("http://localhost:7777/tcp/TimeService/TheTimeService");
            Sample::ITimeService::Ptr pTimeService = Sample::TimeServiceClientHelper::find(uri);
    
            // invoke methods on remote object
            Sample::Time currentTime = pTimeService->currentTimeAsStruct();
            std::cout << "Current time: " << std::setw(2) << std::setfill('0') 
                << currentTime.hour << ":" << currentTime.minute << std::endl;
        }
        catch (Poco::Exception& exc)
        {
            std::cerr << exc.displayText() << std::endl;
            return 1;
        }
        return 0;
    }
----

Classes with non-public data members can be used as parameter or return value types as well. 
For this to work, such a class must follow a few conventions:

  * The class must support full value semantics (copy constructor and
    assignment operator), and it must have a public default constructor.
  * For every non-public data member that should be serialized, there must
    be both a public setter and a getter member function.
  * The name of the setter and getter functions must be derived
    from the name of the member variable according to certain rules.

Rules for member variable and setter/getter function names are as follows.
For a member variable named <[var]>, <[_var]>, <[var_]> or <[m_var]>, the getter 
function signature must be:

    <type> getVar() const;
----

or (if the member variable name is not <[var]>):

    <type> var() const;
----

The setter function signature must be:

    void setVar(<type> value);
----

or (if the member variable name is not <[var]>):

    void var(<type> value);
----

The type of the getter function return value and the setter function parameter
can also be a const reference of the respective type.

Classes used as parameter or return value types should be defined and implemented
in their own header and implementation files, and these files must be available
to the client as well.


!!!Implementing Server-to-Client Callbacks And Remote Events

For many applications, the ability to simple have a client invoke
remote objects on a server is not enough. The ability to have the
server asynchronously notify the client of certain events may also
be needed. With Remoting, this feature can implemented in three
ways: polling the server, implementing server-to-client
callbacks, and using remote events.


!!Polling The Server

Polling the server does not require any new programming technique.
All that needs to be done is to periodically invoke a remote method
on the server, which, as result, then sends back any new data
that the server wants to send to the client. The advantages of the
polling model are:

  * polling is very easy to implement,
  * there aren't any issues with firewalls -- as soon as the client
    is able to reach the server, it will also receive its notifications,
    because it is always the client that initiates the connection, and
    
Polling has two serious disadvantages, though:

  * polling significantly increases the server and network load, especially with
    many clients and short polling intervals, and
  * the client needs additionaly logic to periodically poll the server.


!!Server-to-Client Callbacks

An way to implement callbacks from the server to the client
is to make the client a Remoting server as well, and have the server
simply invoke a remote method on the client (thus, temporarily switching
the roles of client and server).
The steps to implement this are as follows:

   1. The client registers a Listener, which will accept incoming
      connections from the server.
   2. The client registers a service object providing the
      callback method the server will invoke.
   3. The client tells the server the Remoting URI of its
      callback service object. The server should provide
      a remote method for that purpose.
   4. When the server needs to invoke the client's callback
      method, it obtains the callback object's interface (or proxy) from
      its ORB, using the URI supplied by the client, and simply
      invokes the callback method on the interface object.

The advantages of this model are:

  * it is relatively easy to implement, and
  * it does not unnecessarily increase network and server load --
    messages are only sent over the network if the server needs
    to notify the client.
    
This model has a significant drawback, though: it may not work
across firewalls, as the server needs to open a network connection
to the client. If the client is located behind a NAT router or firewall,
the server won't be able to reach the client, unless additonal 
steps (basically, punching a hole through the firewall) are taken.


!!Remote Events

Remote events are the easiest way to implement server-to-client callbacks.
They are based on the Poco::BasicEvent event mechanism. Similarly to how
Remoting makes the member functions of a class available remotely, it can
also make Poco::BasicEvent members available remotely. However, not all transports
support this feature. Currently, only the TCP transport supports remote events.


!Implementing Remote Events On The Server

We can extend our TimeServer sample to support an event-based wake up service,
by adding a public Poco::BasicEvent member variable (named <[wakeUp]>), as shown below.


    #ifndef TimeService_INCLUDED
    #define TimeService_INCLUDED
    
    
    #include "Poco/Foundation.h"
    #include "Poco/BasicEvent.h"
    #include "Poco/DateTime.h"
    #include "Poco/Util/Timer.h"
    
    
    namespace Sample {
    
    
    //@ remote
    class TimeService
    {
    public:
        TimeService();
            /// Creates the TimeService.
    
        ~TimeService();
            /// Destroys the TimeService.
            
        Poco::BasicEvent<const std::string> wakeUp;
        
        Poco::DateTime currentTime() const;
            /// Returns the current date and time.
            
        void wakeMeUp(const Poco::DateTime& time, const std::string& message);
            /// Schedules a wakeup call.
            ///
            /// Fires the wakeUp event at the given time, passing
            /// the given message as argument.
            
    private:
        Poco::Util::Timer _timer;
    };
    
    
    } // namespace Sample
    
    
    #endif // TimeService_INCLUDED
----

We've also added a Poco::Util::Timer member variable, which we'll use to schedule
the callback events.

When we run RemoteGenNG on the header file to generate the server code, it will 
generate a new class, <[TimeServiceEventDispatcher]>. However, before running RemoteGenNG, 
we must make a small change to its configuration file. In order to generate code supporting remote 
events, the code generator must know about the Poco::RemotingNG::EventDispatcher class
for server code, and about the Poco::RemotingNG::EventSubscriber class for client code.
So we'll have to add the corresponding headers to the configuration file:

    <RemoteGen>
        <files>
            <include>
                ${POCO_BASE}/RemotingNG/include/Poco/RemotingNG/RemoteObject.h
                ${POCO_BASE}/RemotingNG/include/Poco/RemotingNG/Proxy.h
                ${POCO_BASE}/RemotingNG/include/Poco/RemotingNG/Skeleton.h
                ${POCO_BASE}/RemotingNG/include/Poco/RemotingNG/EventDispatcher.h <!-- needed for events on server -->
                ${POCO_BASE}/RemotingNG/include/Poco/RemotingNG/EventSubscriber.h <!-- needed for events on client -->
                ../TimeServerTCP/include/TimeService.h
            </include>
            <exclude>
            </exclude>
        </files>
----

The generated <[TimeServiceEventDispatcher]> class must be added to our server project.
To implement the event in our TimeService class we use the Poco::Util::Timer task,
to schedule firing the event at the specified time. For that, we'll first need a
subclass of Poco::Util::TimerTask that fires the event:

    class WakeUpTask: public Poco::Util::TimerTask
    {
    public:
        WakeUpTask(TimeService& owner, const std::string& message):
            _owner(owner),
            _message(message)
        {
        }
        
        void run()
        {
            _owner.wakeUp(this, _message);
        }
        
    private:
        TimeService& _owner;
        std::string _message;
    };
----

The <[wakeMeUp()]> member function simply creates an instance of <[WakeUpTask]> and
passes it to the timer.

    void TimeService::wakeMeUp(const Poco::DateTime& time, const std::string& message)
    {
        _timer.schedule(new WakeUpTask(*this, message), time.timestamp());
    }
----

One final step needs to be done in order to enable events on our server.
We must tell the Remoting NG framework that we want it to handle remote events
for our <[TimeService]> object. Also, the Remoting NG framework needs a Transport
to actually deliver events to clients. Therefore, similarly to client code, we must
register the TransportFactory for the TCP Transport which will be used for event delivery.

    // register TCP transport (for events)
    Poco::RemotingNG::TCP::TransportFactory::registerFactory();
----

To enable events for our service object, we use the client helper class. Events for
a service object can be enabled after the service object has been registered. The
protocol name of the transport ("tcp" in our case) to use for events must be given as 
argument, along with the object's URI.

    // register TimeService service object and enable events
    std::string uri = Sample::TimeServiceServerHelper::registerObject(new Sample::TimeService, "TheClock", listener);
    Sample::TimeServiceServerHelper::enableEvents(uri, "tcp");
----

Now the server is ready to dispatch remote events to clients.


!Receiving Remote Events On The Client

In order to receive remote events on the client, the RemoteGenNG code generator
must generate the necessary client support code. Specifically an <*EventSubscriber*>
class must be generated. To do that, the code generator must know the
Poco::RemotingNG::EventSubscriber class, so its header file must be included
in the configuration file. We already added this file when we modified the configuration
file for the server. After running the code generator, the generated
<[TimeServiceEventSubscriber]> class must be added to the project, along with the
other generated files. When we look at the generated interface class, we'll see that
it now has a Poco::BasicEvent member variable that matches the server's <[wakeUp]>
event, as well as a new method <[remoting__enableEvents()]>. 
In order to receive events, we must first register a delegate with
the proxy's event. Furthermore, we must tell the proxy how to receive events.
For receiving events, the client must set up an <*EventListener*> object. The 
<*EventListener*> is similar to the <*Listener*> object used by the server to
listen for incoming requests. In fact, the Poco::RemotingNG::EventListener class
is a subclass of Poco::RemotingNG::Listener. One additional task the EventListener
is responsible for is sending a transport-specific subscription request to the server,
so that the server knows whom to send its events. Our EventListener object must
be passed to the local proxy, so that the proxy will receive remote events, which will
cause the proxy's corresponding events members (to which we've subscribed our delegates) 
to be fired. This is done by calling <[remoting__enableEvents()]>.

Putting it all together, the client's setup code looks as follows:

    // register transport
    Poco::RemotingNG::TCP::TransportFactory::registerFactory();
    
    // create event listener
    Poco::RemotingNG::TCP::Listener::Ptr pListener = new Poco::RemotingNG::TCP::Listener;
    
    // get proxy for remote object
    std::string uri("remoting.tcp://localhost:7777/tcp/TimeService/TheClock");
    Services::ITimeService::Ptr pClock = Services::TimeServiceClientHelper::find(uri);
    
    // invoke method on remote object
    Poco::DateTime dt = pClock->currentTime();
    std::cout << Poco::DateTimeFormatter::format(dt, Poco::DateTimeFormat::SORTABLE_FORMAT) << std::endl;
    
    // enable events
    pClock->remoting__enableEvents(pListener);
    pClock->wakeUp += Poco::delegate(onWakeUp);
----

First we register the Transport using the TransportFactory, as usual. Then we create
an EventListener instance. For the TCP transport, the EventListener uses the
TCP Transport's connection manager to automatically attach itself to the
right connection for a specific proxy, so no arguments need to be passed
to its constructor.
After obtaining the proxy object, we first enable remote events for that specific
proxy by calling <[remoting__enableEvents()]>, passing our EventListener as
argument. Then we register a delegate function with the proxy's event. Now
we are ready to receive remote events. Our delegate function is shown below:

    void onWakeUp(const std::string& message)
    {
        std::cout << "WakeUp: " << message << std::endl;
    }
----

When we no longer wish to receive events, we remove our delegate from the
proxy's event and disable delivery of remote events:

    pClock->wakeUp -= Poco::delegate(onWakeUp);
    pClock->remoting__enableEvents(pListener, false);
----


The complete sample code for server and client can be found in the TimeServerTCP
and TimeClientTCP sample applications.


This concludes the Remoting NG tutorial. You should now have a basic understanding
of all important Remoting NG capabilities and programming techniques.
For a complete description of all Remoting capabilities and options,
please refer to the [[00200-RemotingNGUserGuide.html Remoting NG User Guide]].
